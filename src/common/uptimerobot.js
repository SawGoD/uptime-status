import axios from 'axios'
import dayjs from 'dayjs'
import { formatNumber } from './helper'

// –ö–µ—à –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ API (5 –º–∏–Ω—É—Ç) - –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö API –∫–ª—é—á–µ–π
const CACHE_DURATION = 5 * 60 * 1000 // 5 –º–∏–Ω—É—Ç –æ–±—ã—á–Ω–æ
const CACHE_DURATION_RATE_LIMITED = 15 * 60 * 1000 // 15 –º–∏–Ω—É—Ç –ø—Ä–∏ rate limiting

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
const activeRequests = new Map()

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage –∫–µ—à–µ–º
const getCacheData = (cacheKey) => {
    try {
        const cacheItem = localStorage.getItem(`uptimerobot_cache_${cacheKey}`)
        if (cacheItem) {
            const parsed = JSON.parse(cacheItem)
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dayjs –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫–µ—à–∞
            const restoredData = parsed.data.map((monitor) => ({
                ...monitor,
                daily: monitor.daily.map((day) => ({
                    ...day,
                    date: dayjs(day.date), // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º dayjs –æ–±—ä–µ–∫—Ç
                })),
            }))
            return {
                data: restoredData,
                timestamp: parsed.timestamp,
                isRateLimited: parsed.isRateLimited || false,
            }
        }
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞:', error)
    }
    return null
}

const setCacheData = (cacheKey, data, isRateLimited = false) => {
    try {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dayjs –æ–±—ä–µ–∫—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const serializedData = data.map((monitor) => ({
            ...monitor,
            daily: monitor.daily.map((day) => ({
                ...day,
                date: day.date.toISOString(), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º dayjs –≤ —Å—Ç—Ä–æ–∫—É
            })),
        }))

        const cacheItem = {
            data: serializedData,
            timestamp: Date.now(),
            isRateLimited,
        }
        localStorage.setItem(`uptimerobot_cache_${cacheKey}`, JSON.stringify(cacheItem))
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à–∞:', error)
    }
}

const isCacheValid = (cacheData) => {
    if (!cacheData) return false

    const now = Date.now()
    const cacheDuration = cacheData.isRateLimited ? CACHE_DURATION_RATE_LIMITED : CACHE_DURATION
    const isValid = now - cacheData.timestamp < cacheDuration

    if (isValid) {
        const ageMinutes = Math.round((now - cacheData.timestamp) / 1000 / 60)
        console.log(
            `üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑—Ä–∞—Å—Ç: ${ageMinutes} –º–∏–Ω${cacheData.isRateLimited ? ', —Ä–µ–∂–∏–º rate-limit –∑–∞—â–∏—Ç—ã' : ''})`
        )
    }

    return isValid
}

export async function GetMonitors(apikey, days) {
    // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞ —Å —É—á–µ—Ç–æ–º API –∫–ª—é—á–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏)
    const apiKeyHash = apikey.slice(-8)
    const cacheKey = `${apiKeyHash}_${days}_days`

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cachedData = getCacheData(cacheKey)
    if (isCacheValid(cachedData)) {
        return cachedData.data
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º –∫–µ—à–∞
    if (activeRequests.has(cacheKey)) {
        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...')
        return await activeRequests.get(cacheKey)
    }

    console.log('üîÑ –ö–µ—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const requestPromise = makeApiRequest(apikey, days, cacheKey)
    activeRequests.set(cacheKey, requestPromise)

    try {
        const result = await requestPromise
        return result
    } finally {
        // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        activeRequests.delete(cacheKey)
    }
}

async function makeApiRequest(apikey, days, cacheKey) {
    let isRateLimited = false

    const dates = []
    const today = dayjs(new Date().setHours(0, 0, 0, 0))
    for (let d = 0; d < days; d++) {
        dates.push(today.subtract(d, 'day'))
    }

    const ranges = dates.map((date) => `${date.unix()}_${date.add(1, 'day').unix()}`)
    const start = dates[dates.length - 1].unix()
    const end = dates[0].add(1, 'day').unix()
    ranges.push(`${start}_${end}`)

    const postdata = {
        api_key: apikey,
        format: 'json',
        logs: 1,
        log_types: '1-2',
        logs_start_date: start,
        logs_end_date: end,
        custom_uptime_ranges: ranges.join('-'),
    }

    const formData = new URLSearchParams()
    Object.keys(postdata).forEach((key) => {
        formData.append(key, postdata[key])
    })

    let response = null
    let lastError = null

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
    try {
        console.log('üöÄ –ü—Ä–æ–±—É–µ–º –ü–†–Ø–ú–û–ï –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ UptimeRobot API...')
        console.log('üì° URL: https://api.uptimerobot.com/v2/getMonitors')
        console.log('üîß –ú–µ—Ç–æ–¥: POST')

        // –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –≤ –ª–æ–≥–∞—Ö
        const maskedData = formData.toString().replace(/api_key=[^&]+/g, 'api_key=***masked***')
        console.log('üì§ –î–∞–Ω–Ω—ã–µ:', maskedData.substring(0, 120) + '...')

        response = await axios({
            method: 'POST',
            url: 'https://api.uptimerobot.com/v2/getMonitors',
            data: formData.toString(),
            timeout: 15000,
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        })

        console.log('‚úÖ –ü–†–Ø–ú–û–ï: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!')
        console.log('üì¶ –ü–†–Ø–ú–û–ï: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...')

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if (response.data && response.data.stat === 'ok') {
            console.log('üéâ –ü–†–Ø–ú–û–ï: –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.')
            console.log('üìä –ü–†–Ø–ú–û–ï: –ú–æ–Ω–∏—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', response.data.monitors?.length || 0)
        } else {
            console.warn('‚ö†Ô∏è –ü–†–Ø–ú–û–ï: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', response.data)
            response = null
        }
    } catch (error) {
        console.error('‚ùå –ü–†–Ø–ú–û–ï: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
        console.error('üî¥ –ü–†–Ø–ú–û–ï:', error.message)
        if (error.response) {
            console.error('üìÑ –ü–†–Ø–ú–û–ï: –°—Ç–∞—Ç—É—Å:', error.response.status)
            console.error('üìÑ –ü–†–Ø–ú–û–ï: –û—Ç–≤–µ—Ç:', error.response.data)

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ rate limiting –ø—Ä–∏ 429 –æ—à–∏–±–∫–µ
            if (error.response.status === 429) {
                isRateLimited = true
                console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω rate limiting - –≤–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ')
            }
        }

        // –ï—Å–ª–∏ —ç—Ç–æ CORS –æ—à–∏–±–∫–∞ –∏–ª–∏ rate limit (429), –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏
        if (error.message.includes('CORS') || error.message.includes('Network Error') || error.response?.status === 429) {
            console.log('üîÑ –ü—Ä–æ–±—É–µ–º CORS –ø—Ä–æ–∫—Å–∏...')

            // –°–ø–∏—Å–æ–∫ CORS –ø—Ä–æ–∫—Å–∏ –¥–ª—è fallback
            const corsProxies = [
                {
                    name: 'AllOrigins',
                    url:
                        'https://api.allorigins.win/raw?url=' +
                        encodeURIComponent('https://api.uptimerobot.com/v2/getMonitors?' + formData.toString()),
                    method: 'GET',
                    data: null,
                    headers: {},
                },
                {
                    name: 'JSONP.io',
                    url:
                        'https://jsonp.afeld.me/?url=' +
                        encodeURIComponent('https://api.uptimerobot.com/v2/getMonitors?' + formData.toString()),
                    method: 'GET',
                    data: null,
                    headers: {},
                },
                {
                    name: 'ProxyHerd',
                    url:
                        'https://api.proxyherd.com/v1/?url=' +
                        encodeURIComponent('https://api.uptimerobot.com/v2/getMonitors?' + formData.toString()),
                    method: 'GET',
                    data: null,
                    headers: {},
                },
                {
                    name: 'CorsProxy.org',
                    url: 'https://corsproxy.org/?' + encodeURIComponent('https://api.uptimerobot.com/v2/getMonitors?' + formData.toString()),
                    method: 'GET',
                    data: null,
                    headers: {},
                },
                {
                    name: 'CORS.SH',
                    url: 'https://proxy.cors.sh/https://api.uptimerobot.com/v2/getMonitors',
                    method: 'POST',
                    data: formData.toString(),
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                },
            ]

            // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–∫—Å–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for (let i = 0; i < corsProxies.length; i++) {
                const proxy = corsProxies[i]

                try {
                    console.log(`üîÑ [${i + 1}/${corsProxies.length}] –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ ${proxy.name}`)
                    console.log(`üì° URL: ${proxy.url}`)
                    console.log(`üîß –ú–µ—Ç–æ–¥: ${proxy.method}`)
                    console.log(`üì§ –î–∞–Ω–Ω—ã–µ:`, proxy.data ? '–µ—Å—Ç—å (—Å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º API –∫–ª—é—á–æ–º)' : '–Ω–µ—Ç')

                    response = await axios({
                        method: proxy.method,
                        url: proxy.url,
                        data: proxy.data,
                        timeout: 15000,
                        headers: proxy.headers,
                    })

                    console.log(`‚úÖ ${proxy.name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ`)
                    console.log(`üì¶ ${proxy.name}: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...`)

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç UptimeRobot
                    if (response.data && response.data.stat === 'ok') {
                        console.log(`üéâ ${proxy.name}: –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ—Ç –ø—Ä–æ–∫—Å–∏.`)
                        console.log(`üìä ${proxy.name}: –ú–æ–Ω–∏—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${response.data.monitors?.length || 0}`)
                        break
                    } else {
                        console.warn(`‚ö†Ô∏è ${proxy.name}: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:`, response.data)
                        response = null
                    }
                } catch (proxyError) {
                    console.error(`‚ùå ${proxy.name}: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`)
                    console.error(`üî¥ ${proxy.name}: ${proxyError.message}`)
                    if (proxyError.response) {
                        console.error(`üìÑ ${proxy.name}: –°—Ç–∞—Ç—É—Å: ${proxyError.response.status}`)
                        console.error(`üìÑ ${proxy.name}: –û—Ç–≤–µ—Ç:`, proxyError.response.data)
                    }
                    lastError = proxyError
                    response = null

                    // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–∫—Å–∏ (1 —Å–µ–∫—É–Ω–¥–∞)
                    if (i < corsProxies.length - 1) {
                        console.log(`‚è≥ –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ–∫—Å–∏...`)
                        await new Promise((resolve) => setTimeout(resolve, 1000))
                    }
                }
            }
        } else {
            lastError = error
        }
    }

    if (!response) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ UptimeRobot API. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
    }
    if (response.data.stat !== 'ok') throw response.data.error

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const processedData = response.data.monitors.map((monitor) => {
        const ranges = monitor.custom_uptime_ranges.split('-')
        const average = formatNumber(ranges.pop())
        const daily = []
        const map = []
        dates.forEach((date, index) => {
            map[date.format('YYYYMMDD')] = index
            daily[index] = {
                date: date,
                uptime: formatNumber(ranges[index]),
                down: { times: 0, duration: 0 },
            }
        })

        const total = monitor.logs.reduce(
            (total, log) => {
                if (log.type === 1) {
                    const date = dayjs.unix(log.datetime).format('YYYYMMDD')
                    total.duration += log.duration
                    total.times += 1
                    daily[map[date]].down.duration += log.duration
                    daily[map[date]].down.times += 1
                }
                return total
            },
            { times: 0, duration: 0 }
        )

        const result = {
            id: monitor.id,
            name: monitor.friendly_name,
            url: monitor.url,
            average: average,
            daily: daily,
            total: total,
            status: 'unknow',
        }

        if (monitor.status === 2) result.status = 'ok'
        if (monitor.status === 9) result.status = 'down'
        return result
    })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    setCacheData(cacheKey, processedData, isRateLimited)

    const cacheMinutes = (isRateLimited ? CACHE_DURATION_RATE_LIMITED : CACHE_DURATION) / 1000 / 60
    console.log(`üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–µ—à –Ω–∞ ${cacheMinutes} –º–∏–Ω—É—Ç${isRateLimited ? ' (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑-–∑–∞ rate limiting)' : ''}`)

    return processedData
}
